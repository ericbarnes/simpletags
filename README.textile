h1. Simpletags

Version 1.0

* Author: "Dan Horrigan":http://dhorrigan.com/

h2. DESCRIPTION

Simpletags is exactly what it sounds like...a simple way to use tags in your PHP application.  This allows you to have tags that look like this:

<pre><code>{tag:something:other}
{tag:date format="m/d/Y"}

{tag:blog:entries count="5"}
Stuff here
{/tag:blog:entries}</code></pre>

h2. INSTALLATION

1.  Just include the Simpletags.php file into your app

h4.  CodeIgniter

1.  Put Simpletags.php into your application/libraries folder
2.  Load it like normal: @$this->load->library('events');@ (or autoload it).

h2. USAGE

You can send a config array to the constructor with the following options (these are the defaults):

<pre><code>array(
    'l_delim' => '{',
    'r_delim' => '{',
    'trigger' => 'tag:',
);</code></pre>

You can also set the delimiters and triggers via the following functions:

<pre><code>$simpletags = new Simpletags();
$simpletags->set_delimitiers('{', '}');
$simpletags->set_trigger('foo:');</code></pre>

To parse a string of text you simply call the parse() function.  The parse function accepts 3 parameters:

1.  $content - The content to parse
2.  [optional] $data - a keyed array of data to replace tag vars with (more below)
3.  [optional] $callback - A callback that will be called for each tag.

h3.  Normal Return

If no callback is specified then the function will return an array.  Consider this is the content you sent:

<pre><code>Hello there.

{tag:rest:get url="http://example.com/api" type="json"}
Stuff here
{/tag:rest:get}

Bye.</code></pre>

Parse would return this:

<pre><code>Array
(
    [content] => Hello there.

marker_0k0dj3j4nJHDj22j

Bye.
    [tags] => Array
        (
            [0] => Array
                (
                    [full_tag] => {tag:rest:get url="http://example.com/api" type="json"}
Stuff here
{/tag:rest:get}
                    [attributes] => Array
                        (
                            [url] => http://example.com/api
                            [type] => json
                        )

                    [segments] => Array
                        (
                            [0] => rest
                            [1] => get
                        )

                    [content] => 
Stuff here

                    [marker] => marker_0k0dj3j4nJHDj22j
                )

        )

)</code></pre>

h3.  The Data Array

The data array is a keyed array who's contents will replace tags with the same name.  Example:

<pre><code>{tag:foo:bar}</code></pre>

Would be replaced with "Hello World" when the following data array is sent to the parse function:

<pre><code>$data['foo']['bar'] = "Hello World"</code></pre>


h3.  Callbacks

The callback must be in a form that is_callable() accepts (typically array(object, method)).  The callbac function should take 1 parameter (an array).

The callback will be sent the tag information in the form of an array.  Consider the following tag:

<pre><code>{tag:rest:get url="http://example.com/api" type="json"}
Stuff here
{/tag:rest:get}</code></pre>

Would send the callback function the following array:

<pre><code>Array
(
    [full_tag] => {tag:rest:get url="http://example.com/api" type="json"}
Stuff here
{/tag:rest:get}
    [attributes] => Array
        (
            [url] => http://example.com/api
            [type] => json
        )

    [segments] => Array
        (
            [0] => rest
            [1] => get
        )

    [content] => 
Stuff here

    [marker] => marker_0k0dj3j4nJHDj22j
)</code></pre>

h2.  CodeIgniter Usage

You use it the same as above, except you would use the following:

<pre><code>$this->load->library('simpletags');
$content = $this->simpletags->parse($content, $data, array($this, 'parser_callback'));</code></pre>
